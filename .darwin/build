((3) 0 () 9 ((p+ #"/home/britt/gitRepos/brittAnderson.github.io/_src/posts/2021-06-02-the-queens-own-detectress.scrbl" . unix) (p+ #"/home/britt/gitRepos/brittAnderson.github.io/_src/posts/2021-05-26-learning-racket-via-some-pollen.scrbl" . unix) (p+ #"/home/britt/gitRepos/brittAnderson.github.io/_src/posts/2021-06-02-more-pollen.scrbl" . unix) (p+ #"/home/britt/gitRepos/brittAnderson.github.io/_src/posts/2021-08-18-should-i-program-in-lisp.md" . unix) (p+ #"/home/britt/gitRepos/brittAnderson.github.io/_src/posts/2022-05-10-common-lisp-is-old-and-i-love-it.md" . unix) (p+ #"/home/britt/gitRepos/brittAnderson.github.io/_src/posts/2022-06-22-getting-started-writing-with-scribble.scrbl" . unix) (p+ #"/home/britt/gitRepos/brittAnderson.github.io/_src/posts/2021-04-14-hello-darwin-and-avoir-hakyll.scrbl" . unix) (p+ #"/home/britt/gitRepos/brittAnderson.github.io/_src/posts/2021-03-29-whatIsAttn.md" . unix) (p+ #"/home/britt/gitRepos/brittAnderson.github.io/_src/posts/2021-01-07-a-2021-raisins.md" . unix)) () (h ! (equal) ((p+ #"/home/britt/gitRepos/brittAnderson.github.io/_src/posts/2021-01-07-a-2021-raisins.md" . unix) f post (u . "New Year's Raisins") (? . 8) 1648480973 (p+ #"/home/britt/gitRepos/brittAnderson.github.io/2021/01/new-year-s-raisins.html" . unix) (u . "/2021/01/new-year-s-raisins.html") (u . "2021-01-07T00:00:00") #f (? . 7) (c (u . "raisin") c (u . "Author: Britt Anderson")) (u . "\n<p>I have recently learned of a Portuguese New Year&rsquo;s tradition where you eat twelve raisins as the clock tolls midnight. Each raisin represents one month of the coming year and in the version I learned you make one wish for each raisin: one wish for each month of the year to come.</p>") #t (u . "\n<p>I have recently learned of a Portuguese New Year&rsquo;s tradition where you eat twelve raisins as the clock tolls midnight. Each raisin represents one month of the coming year and in the version I learned you make one wish for each raisin: one wish for each month of the year to come.</p>\n<!-- more-->\n\n<p>When compared to the North American tradition of New Year&rsquo;s resolutions this one seems preferable. One thinks discretely and concretely about the year to come, and, at least in my case, made me think about what I could do to contribute to each month&rsquo;s opportunities.</p>\n\n<p>This blog is my idea overflow. The place where I intended to put the experimental meanderings and odd one-offs that were not really &ldquo;academic&rdquo; (thus not fitting on the <a href=\"https://brittlab.uwaterloo.ca\">lab site</a>), but were still things that I wanted to pollinate the blog-o-sphere with. However, in practice it has not really worked out that way. Months (sometimes a year or more) go by with no entry. Then I change the software I use to produce the blog, write one post to proclaim that fact and my good intentions, and then silence.</p>\n\n<p>In the raisin spirit I decided to make this my raisin-<em>d&rsquo;etre</em> for the year and come up with one blog title for each month of the year in an effort to encourage and guilt myself into writing on this blog more often.</p>\n\n<p>This obviously counts as the January entry<sup><a id=\"fnr.1\" class=\"footref\" href=\"#fn.1\">1</a></sup>, but here are some tentative ideas that I intend to produce for the remainder of the year.</p>\n\n<table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\"> \n <colgroup>\n  <col class=\"org-left\" /> \n  <col class=\"org-left\" /> \n  <col class=\"org-left\" /></colgroup> \n <thead>\n  <tr>\n   <th scope=\"col\" class=\"org-left\">Month</th> \n   <th scope=\"col\" class=\"org-left\">Title/Topic</th> \n   <th scope=\"col\" class=\"org-left\">Comments</th></tr></thead> \n <tbody>\n  <tr>\n   <td class=\"org-left\">Jan</td> \n   <td class=\"org-left\">Raisins</td> \n   <td class=\"org-left\">Blogging More: a resolution</td></tr></tbody> \n <tbody>\n  <tr>\n   <td class=\"org-left\">Feb</td> \n   <td class=\"org-left\">R or Julia</td> \n   <td class=\"org-left\">If you know R should you bother?</td></tr> \n  <tr>\n   <td class=\"org-left\">&#160;</td> \n   <td class=\"org-left\">&#160;</td> \n   <td class=\"org-left\">If you know neither should start with</td></tr> \n  <tr>\n   <td class=\"org-left\">&#160;</td> \n   <td class=\"org-left\">&#160;</td> \n   <td class=\"org-left\">Julia? First thoughts.</td></tr></tbody> \n <tbody>\n  <tr>\n   <td class=\"org-left\">Mar</td> \n   <td class=\"org-left\">There is no such thing</td> \n   <td class=\"org-left\">One of my most popular papers.</td></tr> \n  <tr>\n   <td class=\"org-left\">&#160;</td> \n   <td class=\"org-left\">as attention - 10 Years On</td> \n   <td class=\"org-left\">I want to revisit and rethink its ideas.</td></tr></tbody> \n <tbody>\n  <tr>\n   <td class=\"org-left\">Apr</td> \n   <td class=\"org-left\">Pandemic Distractions:</td> \n   <td class=\"org-left\">I wrote a kid's book. Why? And here it</td></tr> \n  <tr>\n   <td class=\"org-left\">&#160;</td> \n   <td class=\"org-left\">The Queen's Own Detectress</td> \n   <td class=\"org-left\">is in pdf.</td></tr></tbody> \n <tbody>\n  <tr>\n   <td class=\"org-left\">May</td> \n   <td class=\"org-left\">Is Psychology a Science?</td> \n   <td class=\"org-left\">I don't think most people who call themselves</td></tr> \n  <tr>\n   <td class=\"org-left\">&#160;</td> \n   <td class=\"org-left\">&#160;</td> \n   <td class=\"org-left\">psychologists really are, and those that are</td></tr> \n  <tr>\n   <td class=\"org-left\">&#160;</td> \n   <td class=\"org-left\">&#160;</td> \n   <td class=\"org-left\">scientists are not really psychologists.</td></tr></tbody> \n <tbody>\n  <tr>\n   <td class=\"org-left\">Jun</td> \n   <td class=\"org-left\">Should Cognitive Scientists</td> \n   <td class=\"org-left\">Yes. Well, Maybe. Well, oh I don't know. Here</td></tr> \n  <tr>\n   <td class=\"org-left\">&#160;</td> \n   <td class=\"org-left\">Learn Category Theory?</td> \n   <td class=\"org-left\">I'll share my confusion.</td></tr></tbody> \n <tbody>\n  <tr>\n   <td class=\"org-left\">Jul</td> \n   <td class=\"org-left\">What math should neuro-</td> \n   <td class=\"org-left\">What math would allow for a clearer expression</td></tr> \n  <tr>\n   <td class=\"org-left\">&#160;</td> \n   <td class=\"org-left\">scientists know?</td> \n   <td class=\"org-left\">of neuroscience theories?</td></tr></tbody> \n <tbody>\n  <tr>\n   <td class=\"org-left\">Aug</td> \n   <td class=\"org-left\">How should we communicate</td> \n   <td class=\"org-left\">Do we just do pre-prints? Are journals dead?</td></tr> \n  <tr>\n   <td class=\"org-left\">&#160;</td> \n   <td class=\"org-left\">science?</td> \n   <td class=\"org-left\">Are twitter-ish forums healthy for science?</td></tr> \n  <tr>\n   <td class=\"org-left\">&#160;</td> \n   <td class=\"org-left\">&#160;</td> \n   <td class=\"org-left\">Are influencers good for science?</td></tr></tbody> \n <tbody>\n  <tr>\n   <td class=\"org-left\">Sep</td> \n   <td class=\"org-left\">What do I think of Statistical</td> \n   <td class=\"org-left\">I think it is great. Maybe publically obliging</td></tr> \n  <tr>\n   <td class=\"org-left\">&#160;</td> \n   <td class=\"org-left\">Rethinking?</td> \n   <td class=\"org-left\">myself to write something about it will make me</td></tr> \n  <tr>\n   <td class=\"org-left\">&#160;</td> \n   <td class=\"org-left\">&#160;</td> \n   <td class=\"org-left\">read more than the first chapter.</td></tr></tbody> \n <tbody>\n  <tr>\n   <td class=\"org-left\">Oct</td> \n   <td class=\"org-left\">Haskell is the abusive spouse</td> \n   <td class=\"org-left\">But I do so love her. And I think she can change.</td></tr> \n  <tr>\n   <td class=\"org-left\">&#160;</td> \n   <td class=\"org-left\">of programming languages.</td> \n   <td class=\"org-left\">&#160;</td></tr></tbody> \n <tbody>\n  <tr>\n   <td class=\"org-left\">Nov</td> \n   <td class=\"org-left\">Idris, Agda, &#8230; what next</td> \n   <td class=\"org-left\">Just in case I ever end my co-dependent relation</td></tr> \n  <tr>\n   <td class=\"org-left\">&#160;</td> \n   <td class=\"org-left\">&#160;</td> \n   <td class=\"org-left\">Haskell. But seriously, what new languages should</td></tr> \n  <tr>\n   <td class=\"org-left\">&#160;</td> \n   <td class=\"org-left\">&#160;</td> \n   <td class=\"org-left\">one learn and why?</td></tr></tbody> \n <tbody>\n  <tr>\n   <td class=\"org-left\">Dec</td> \n   <td class=\"org-left\">A Year of Raisins</td> \n   <td class=\"org-left\">How do I think it went? Will I do it again?</td></tr></tbody></table>\n\n<h2 id=\"footnotes\">Footnotes</h2>\n\n<p><sup><a id=\"fn.1\" href=\"#fnr.1\">1</a></sup> Note that it is appearing in February. Probably not a great omen for the coming year. And should not be interpreted as maligning a great Portuguese tradition.</p>")) ((p+ #"/home/britt/gitRepos/brittAnderson.github.io/_src/posts/2021-08-18-should-i-program-in-lisp.md" . unix) f post (u . "Should I Program in lisp?") (? . 3) 1648480973 (p+ #"/home/britt/gitRepos/brittAnderson.github.io/2021/08/should-i-program-in-lisp.html" . unix) (u . "/2021/08/should-i-program-in-lisp.html") (u . "2021-08-18T10:17:48") (? . 0) (? . 4) (c (u . "mind") c (u . "lisp") c (u . "\"programming languages\"") c (u . "Author: Britt Anderson")) (u . "\n<p>I have spent a lot of time lately thinking about what programming language to use for a new project, and also thinking about whether it is productive to be thinking about which programming language to use for a new project?</p>") #t (u . "\n<p>I have spent a lot of time lately thinking about what programming language to use for a new project, and also thinking about whether it is productive to be thinking about which programming language to use for a new project?</p>\n<!-- more-->\n\n<p>After all as long as it is Turing complete any of them can do what any of the others of them can. But it does seem that there are some idioms that are easier to express in one venacular than another. We could use Roman numerals, but we don&rsquo;t. Not because Roman numerals are not capable of representing arithmetic, but because it is easier to use the base 10 system. So, maybe it does make sense to spend time thinking about programming languages in the context of an intended project?</p>\n\n<p>I am interested in trying to find a language for expressing clearly connections between mind, theory, math, and code. Some I have considered so far are haskell, python, r, julia, racket, and now common lisp. Perhaps some day I will write more on all these different considerations another day. The core challenge seems to be a trade-off between the expressibility of a language, the flexibility of a language, and the availability of well-written and actively maintained libraries for a language.</p>\n\n<p>The questions upper most in my mind at the moment are:</p>\n\n<blockquote>\n <p>Is the mapping from inchoate ideas to code cleaner in lisp?</p></blockquote>\n\n<blockquote>\n <p>Does it say anything about the structure of our ideas if this is the case?</p></blockquote>\n\n<blockquote>\n <p>Can we infer something about the structure of our ideas by analyzing the structure of the lisp language?</p></blockquote>")) ((p+ #"/home/britt/gitRepos/brittAnderson.github.io/_src/posts/2021-06-02-more-pollen.scrbl" . unix) f post (u . "More Pollen") (? . 2) 1648480973 (p+ #"/home/britt/gitRepos/brittAnderson.github.io/2021/06/more-pollen.html" . unix) (u . "/2021/06/more-pollen.html") (u . "2021-06-02T16:39:34") (? . 1) (? . 0) (c (u . "raisin") c (u . "qod")) (u . "\n<p>Working with Pollen is powerful, but challenging. A few brief comments on converting my Queen&rsquo;s Own Detectress Children&rsquo;s story.</p>") #t (u . "\n<p>Working with Pollen is powerful, but challenging. A few brief comments on converting my Queen&rsquo;s Own Detectress Children&rsquo;s story.</p>\n<!--more-->\n\n<p><a href=\"https://github.com/mbutterick/pollen\">Pollen</a> is a powerful text processing/publishing toolkit written in Racket, and I have been using it to gain some\nfamiliarity with writing racket code. Given that it brings with it its own special syntax I am not sure it is the best place to start for learning Racket. It might be the\nright place to start if your primary goal is publishing, and it is definitely a good place to visit once you have some basic racket down, but trying to learn both\ntogether is tougher than it needs to be.</p>\n\n<p>As just one example you have to use the lozenge &#9674; with one of two different styles of commands, and some of them are slightly different in what you can expect from how they\nare going to handle strings. But all of this gives you great power, and I was able to write a simple template with a next and back page link adapting the example from the tutorials.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"hspace\">&nbsp;</span><span class=\"stt\">1</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktCmt\">;;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">template.html.p</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"hspace\">&nbsp;</span><span class=\"stt\">2</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"RktSym\">&#9674;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><span class=\"nobreak\">-&gt;</span>html</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">html</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">head</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">meta</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">#:charset</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"UTF-8\"</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"hspace\">&nbsp;</span><span class=\"stt\">3</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"RktCmt\">;(title</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">(select</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">'h1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">doc))</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"hspace\">&nbsp;</span><span class=\"stt\">4</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">link</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">#:rel</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"stylesheet\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">#:type</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"text/css\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">#:href</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"styles.css\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"hspace\">&nbsp;</span><span class=\"stt\">5</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">body</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">doc</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"hspace\">&nbsp;</span><span class=\"stt\">6</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"RktSym\">&#9674;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">when/splice</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">previous</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">here</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">a</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">#:href</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"hspace\">&nbsp;</span><span class=\"stt\">7</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">format</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"~a\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">&#9674;|(previous here)|</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"hspace\">&nbsp;</span><span class=\"stt\">8</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">format</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"Prior</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">Chapter</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">~a\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">&#9674;select</span><span class=\"RktPn\">[</span><span class=\"RktSym\">'</span><span class=\"RktSym\">h1</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">&#9674;previous</span><span class=\"RktPn\">[</span><span class=\"RktSym\">here</span><span class=\"RktPn\">]</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"hspace\">&nbsp;</span><span class=\"stt\">9</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"RktSym\">&#9674;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">when/splice</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">next</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">here</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">p</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">a</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">#:href</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">format</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"~a\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">&#9674;|(next here)|</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"stt\">10</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">format</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"Next</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">Chapter</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">~a\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">&#9674;select</span><span class=\"RktPn\">[</span><span class=\"RktSym\">'</span><span class=\"RktSym\">h1</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">&#9674;next</span><span class=\"RktPn\">[</span><span class=\"RktSym\">here</span><span class=\"RktPn\">]</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr></tbody></table></div>\n\n<p>If you look at lines 6 and 9 I am still not quite clear why I had to leave off the lozenge for the predicate to <span class=\"stt\">when/splice</span>, but with a little bit of fiddling\nyou can get it to work, and I think with time the balance between pollen functions and racket functions would become better understood.</p>\n\n<p>In sum, I recommend everyone racket competent try Pollen for a small publishing project, but I recommend newer users &#8212;\n <wbr /> like me &#8212;\n <wbr /> stick more with base racket for a while.</p>\n\n<p>To read the result head over to <a href=\"the-queen-s-own-detectress.html\">Queen&rsquo;s Own Detectress</a> and follow the links there.</p>")) ((p+ #"/home/britt/gitRepos/brittAnderson.github.io/_src/posts/2021-05-26-learning-racket-via-some-pollen.scrbl" . unix) f post (u . "Learning Racket via some Pollen") (? . 1) 1648480973 (p+ #"/home/britt/gitRepos/brittAnderson.github.io/2021/05/learning-racket-via-some-pollen.html" . unix) (u . "/2021/05/learning-racket-via-some-pollen.html") (u . "2021-05-26T16:21:50") (? . 6) (? . 2) (c (u . "raisin") c (u . "racket") c (u . "pollen") c (u . "programming") c (u . "qod") c (u . "haskell")) (u . "\n<p>Learning a new programming language has two characteristic early stages: the tutorial stage where everything is scripted and goes well; and the stage where you first try to do something yourself and it all gets much more real. This entry records some of my impressions on this process as regards <a href=\"https://racket-lang.org/\">racket</a> and <a href=\"https://docs.racket-lang.org/pollen/\">pollen</a>. Can I turn the children&rsquo;s story I wrote for my wife into a series of web pages?</p>") #t (u . "\n<p>Learning a new programming language has two characteristic early stages: the tutorial stage where everything is scripted and goes well; and the stage where you first try to do something yourself and it all gets much more real. This entry records some of my impressions on this process as regards <a href=\"https://racket-lang.org/\">racket</a> and <a href=\"https://docs.racket-lang.org/pollen/\">pollen</a>. Can I turn the children&rsquo;s story I wrote for my wife into a series of web pages?</p>\n<!--more-->\n\n<h1>1\n <tt>&nbsp;</tt><a name=\"(part._.The_.Project)\"></a>The Project</h1>\n\n<h2>1.1\n <tt>&nbsp;</tt><a name=\"(part._.The_.Story)\"></a>The Story</h2>\n\n<p>One night I woke up early and had some melange of dream and hypnogogic hallucination about a child detective. I scratched a few notes down and told my wife about it the next morning over coffee. She loved the story and wanted to know what would happen next. Well, I had no idea. I had not really considered that there would be a next, but I began to mull it over and one chapter led to another and finally to an actual story. My wife was working remotely by this stage and so I would record myself reading each chapter to her as I finished them, which was an intermittent process that took several months. She was happy enough with it that I thought she might like a hard copy. The easiest way for me to make a pdf that looked like a book at that point was to transcribe the notes to LaTeX. It was mostly just text with a few <span class=\"stt\">\\chapter</span> and <span class=\"stt\">\\textbf</span> folded in that then was assembled using the <span class=\"stt\">memoir</span> class. And that was that until prodded by a few family members and pandemic <span style=\"font-style: italic\">ennui</span> I decided to make it available for anyone to read.</p>\n\n<h2>1.2\n <tt>&nbsp;</tt><a name=\"(part._.First_.Task)\"></a>First Task</h2>\n\n<p>Putting LaTeX on the web is not trivial. I did for awhile maintain a personal website using <span class=\"stt\">htlatex</span> and it worked okay, but it was rather brittle, and required a lot of personal editing. I did not want to repeat that process. Just going through each file and manually editing things would have given me the chance to fix typos and grammar errors, but that seemed too easy, and while running it all through <a href=\"https://pandoc.org/MANUAL.html\">pandoc</a> to end up with HTML would have been the practical solution the goal was not so much to get it done, as to get it done in a way that also taught me something. Having recently skimmed some of the pollen manual as my foray into racket I decided to use that.</p>\n\n<h1>2\n <tt>&nbsp;</tt><a name=\"(part._.Some_.General_.Lessons)\"></a>Some General Lessons</h1>\n\n<p>The problems were not too severe or, with hindsight, that unexpected, but they do serve as good reminders to myself, and maybe to others, of things to think about before beginning on something like this.</p>\n\n<h2>2.1\n <tt>&nbsp;</tt><a name=\"(part._.First_.Lesson__.Think_of_first_things_first)\"></a>First Lesson: Think of first things first</h2>\n\n<p>In my case, I wanted some experience with racket and there were some nice tutorials in the pollen document. I began with my first effort concentrating on pollen, when I should have begun working on racket itself. Rather than a means to an end my focus on pollen turned into a bit of a delaying tactic. If your goal is to learn pollen, then starting with pollen and backfilling your racket knowledge is the right way to go, but since pollen uses a different syntax for its commands, it was not the best choice for me to gain racket experience.</p>\n\n<h2>2.2\n <tt>&nbsp;</tt><a name=\"(part._.Second_.Lesson__.Think_hardest_about_your_earliest_choices)\"></a>Second Lesson: Think hardest about your earliest choices</h2>\n\n<p>I knew that pollen understood markdown, and without much thinking I decided to just format the LaTeX files to markdown via pandoc. Then the serious practice could begin. This was a mistake. I should have just started using racket and its regexp capacities to convert the few LaTeX commands being used into pollen markup directly. I ended up with a more complicated file to parse (plain markdown uses series of equal signs underneath the title &#8212;\n <wbr /> that means I had to process the second line to learn how to treat the first line). After fiddling with that, and remembering that other title styles were an option, I spent time learning how to use an optional argument to pandoc to force <span style=\"font-style: italic\">atx style</span> headings. This was completely orthogonal to all my learning goals, and not something I expect to use again. If I had thought harder about that early choice, especially when looking at the first pandoc output, I would have saved myself some time and frustration.</p>\n\n<h2>2.3\n <tt>&nbsp;</tt><a name=\"(part._.Third_.Lesson__.When_the_goal_is_learning_the_measure_is_learning)\"></a>Third Lesson: When the goal is learning the measure is learning</h2>\n\n<p>I called my casually constructed plan to convert the LaTeX to markdown by pandoc a mistake, but it required me to end up learning how to call a command line program (I ended up using <span class=\"stt\">subprocess</span>) within a racket script. From a project design standpoint I still recommend that you consider your earliest decision most carefully; those are the ones where the consequences will have the longest duration of effect and the greatest potential to cascade complications. But for a learning exercise whether something is a mistake or not is measured by whether it led you to or away from learning something in the domain you were targeting.</p>\n\n<h2>2.4\n <tt>&nbsp;</tt><a name=\"(part._.Fourth_.Lesson__.Learning_to_do_.A_often_means_learning_to_do_.B)\"></a>Fourth Lesson: Learning to do <span style=\"font-style: italic\">A</span> often means learning to do <span style=\"font-style: italic\">B</span></h2>\n\n<p>Even a simple project like converting some text files from one format to another is not an isolated activity. Searching for and finding out a fair amount about regexp syntax was not directly related to my interest in learning some racket coding, but it was nice to learn that racket has such nice support. The moral here is that one should expect there will be digressions and not to get unduly frustrated when they arise.</p>\n\n<h1>3\n <tt>&nbsp;</tt><a name=\"(part._.Specific_.Comments_on_the_.Coding)\"></a>Specific Comments on the Coding</h1>\n\n<h2>3.1\n <tt>&nbsp;</tt><a name=\"(part._.Tooling)\"></a>Tooling</h2>\n\n<p>Tooling is great. I like emacs and found <a href=\"https://nongnu.org/geiser/\">geiser mode</a> to be easy to install and set-up, and robust and helpful in its use. I also found <a href=\"https://docs.racket-lang.org/drracket/index.html\">Dr Racket</a> a perfectly pleasant and useful IDE. Either worked well for me, and were a far cry from any experience I had using Haskell and emacs together.</p>\n\n<h2>3.2\n <tt>&nbsp;</tt><a name=\"(part._.Documentation)\"></a>Documentation</h2>\n\n<p>Racket has great documentation that is up to date, and contained in one place. However, it is not always written with different skill levels in mind, and it can be hard for a novice to find the right entry point to a subject. I don&rsquo;t really see how it could be much different, but it is useful in planning to consider also looking for some other complementary introductory materials.</p>\n\n<h2>3.3\n <tt>&nbsp;</tt><a name=\"(part._.It_was_scary_sometimes_how_well_things_worked)\"></a>It was scary sometimes how well things worked</h2>\n\n<p>And very frustrating when things did not work out. Sometimes this was the combination of my newness to the language and the style of the documentation, which often doesn&rsquo;t make simple things clear; how exactly, for example, does one write a @hyperlink? Do you quote one section? Both? What bracketing pattern is recommended? It was necessary for me to search the sources and read about @ syntax to see how to create a hyperlink. Searching hyperlink itself doesn&rsquo;t give you a simple working example. I suspect to someone grown up on the language it is hard to understand that these sorts of problems even occur. There is a challenge to being a solitary user with no fellow travellers in the lecture hall sitting near you and to whom you can refer your questions. For example, I still don&rsquo;t know how to put the \"at\" sign in a typewriter font in this scribble document.</p>\n\n<h2>3.4\n <tt>&nbsp;</tt><a name=\"(part._.Scripting_the_.Conversion_from_.La.Te.X_to_.P.M.D)\"></a>Scripting the Conversion from LaTeX to PMD</h2>\n\n<p>I cribbed from somewhere forgotten a short function to copy a file line by line (checking and halting when it reached the <span class=\"stt\">eof-object</span>). With a list of my tex files in hand I discovered some weird temp versions that I had left around marked by underscores. This was my first prompt to begin to explore the <a href=\"https://docs.racket-lang.org/guide/regexp.html?q=regexp#%28tech._regexp%29\">regexp tools</a>, which is of course great and only hard to use, because regex is hard to use - or at least arcane to use. Armed then with a couple of refined file lists I was ready to script my conversion from LaTex -&gt; markdown (via pandoc) -&gt; then to pollen markdown.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"hspace\">&nbsp;</span><span class=\"stt\">1</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">define</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">tex-files</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">filter</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">lambda</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">fn</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">regexp-match?</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">#rx\"(?&lt;!_).tex\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">fn</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">dl</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"hspace\">&nbsp;</span><span class=\"stt\">2</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">define</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">md-files</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">for/list</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">fn</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">tex-files</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">path-&gt;string</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">path-replace-extension</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">fn</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\".md\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"hspace\">&nbsp;</span><span class=\"stt\">3</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">for</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">fn</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">tex-files</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">let</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">out-name-md</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"hspace\">&nbsp;</span><span class=\"stt\">4</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">string-append</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">dpd</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">path-&gt;string</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">path-replace-extension</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">fn</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\".md\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"hspace\">&nbsp;</span><span class=\"stt\">5</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">[</span><span class=\"RktSym\">out-port-pmd</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">open-output-file</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">string-append</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">dpd</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"hspace\">&nbsp;</span><span class=\"stt\">6</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">path-&gt;string</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"hspace\">&nbsp;</span><span class=\"stt\">7</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">path-replace-extension</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">fn</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\".pmd\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"hspace\">&nbsp;</span><span class=\"stt\">8</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">#:mode</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">'</span><span class=\"RktSym\">text</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">#:exists</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">'</span><span class=\"RktSym\">replace</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"hspace\">&nbsp;</span><span class=\"stt\">9</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">displayln</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">out-name-md</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"stt\">10</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">define-values</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">sp</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">a</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">b</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">c</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">subprocess</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">#f</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">#f</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">#f</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"/home/britt/.cabal/bin/pandoc\"</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"stt\">11</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">path-&gt;string</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">fn</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"--atx-headers\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"--to\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"markdown_strict\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"-o\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">out-name-md</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"stt\">12</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">subprocess-wait</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">sp</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"stt\">13</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">flush-output</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"stt\">14</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">close-input-port</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">a</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"stt\">15</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">close-output-port</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">b</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"stt\">16</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">close-input-port</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">c</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"stt\">17</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">display</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"#lang</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">pollen\\n\\n\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">out-port-pmd</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"stt\">18</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">let</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">inp</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">open-input-file</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">string-&gt;path</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">out-name-md</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">#:mode</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">'</span><span class=\"RktSym\">text</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"stt\">19</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">[</span><span class=\"RktSym\">outp</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">out-port-pmd</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"stt\">20</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">read-write-file-by-line</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">inp</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">outp</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"stt\">21</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">close-output-port</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">outp</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr></tbody></table></div>\n\n<p>The interesting examples for me are the ease of adjusting the file names, and my discovery that it is not so easy to add text to the beginning of a file. Since I had to create a new file with the new extension anyway when going from <span class=\"stt\">md</span> to <span class=\"stt\">pmd</span> it was not a big deal to pre-pend the hashlang for <span class=\"stt\">pollen</span> to the front of the file. Another discovery for me was the sort of lazy approach to the subprocess command. Racket is not an imperative language. Things don&rsquo;t hang around waiting for other things to finish. Of course, one knows that when asked, but it is easy to forget in practice that your serial thinking does not necessarily translate to code execution. Fortunately, racket developers seem sensitive to the fact that their users may be novices and provide the right hints and commands, in this case <span class=\"stt\">subprocess-wait</span>, <span style=\"font-style: italic\">line 12</span>.</p>\n\n<h2>3.5\n <tt>&nbsp;</tt><a name=\"(part._.Functions_for_.Converting_.P.M.D_to_.P.M)\"></a>Functions for Converting PMD to PM</h2>\n\n<p>On viewing the resulting PMD files via the pollen server I decided that I needed to move on. There were backslashes and other characters strings that for various reasons had not converted nicely. Plus, the goal was to learn some pollen too, in addition to the racket code. This took longer than expected (or wanted), but eventually I think the learning was sufficient to justify the time. This calculation is hard to work out with confidence in advance.</p>\n\n<h3>3.5.1\n <tt>&nbsp;</tt><a name=\"(part._.Regexps_for_.Pollen)\"></a>Regexps for Pollen</h3>\n\n<p>I had only a few markdown elements that needed conversion to pollen markup. I used this as an exercise to work on my regexp knowledge. It is still very incomplete, and I don&rsquo;t know that I have gained much understanding, but I got a few workable examples.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">define</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">my-title-line</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">list</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#rx\"^# +.*$\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"&#9674;title{\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"}\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">define</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">my-ital-rx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">list</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#rx\"\\\\/.*?\\\\/\"</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktVal\">\"&#9674;em{\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"}\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">define</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">my-em-rx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">list</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#rx\"\\\\*.*?\\\\*\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"&#9674;bold{\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"}\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">define</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">my-ell-rx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">list</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#px\"\\\\\\\\\\\\.{3,}\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"&#9674;ellipsis{\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"}\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">define</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">my-em-list</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">list</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">my-title-line</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">my-ital-rx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">my-em-rx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">my-ell-rx</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>If this were more than an exercise I would convert these to a different datatype, probably a structure so that I could use the named fields. But for the short, one-off use, I needed these conversions for they were good enough. The basic organization is a list with the regexp expression, the text to be used as substitute on the front of the pollen markup, the text to be placed on the end, and the offsets at the beginning and end of the replacement. Some things like titles don&rsquo;t need any offsets at the end, but some like bold and emphases do. Then, I put all my elements into a badly named list that bore the title of an earlier incarnation, but which had become engrained in my mind at this time, and so was not changed.</p>\n\n<p>Writing the functions that used these regexp&rsquo;s was quite a bit of fun. The batch function is a pretty mundane cycling through of all my files. But the <span class=\"stt\">read-write-file-pmd-pm</span> lent itself, I eventually saw, to a rather concise expression. The real meat of the conversion happens in <span style=\"font-style: italic\">line 17</span>. There we are able to start with our initial version of the line and apply our regexp based replacements one at a time. However, these can be sequenced and so with a <span style=\"font-weight: bold\">fold</span> operation we can traverse our list of regexps and gradually accumulate the result, which we then write out to the file. If there were more regexps to be added they could simply be appended to the list and this function would need no changing.</p>\n\n<p>Why did I think to try this? It was all that time spent writing and reading useless Haskell code (my code was useless, not Haskell itself, which I still love, but just can&rsquo;t figure out a way to use productively). All those functional tools are present in Racket. Either one comes to learn about them in a course or from a colleague, or one can be a renegade from another functional language. But if you want those features they are accessible in Racket, though maybe not as directly as one would like. I missed things like <span class=\"stt\">flip</span> that I got almost for free in Haskell, and the automatic currying was nice, but had to be invoked manually here. As I think about it now though, maybe forcing a conscious use of currying is not all bad. It requires that one think and know what one is doing. Perhaps the same goes for composition.</p>\n\n<p>There are a couple of helper functions below. I like being able to write my functions assuming that a helper function will be written later, rather than being forced to order my code such that nothing is used before it is defined. And the helper functions also show a couple of habits carried over from Haskell (or maybe Unix by some extended line of inheritance). Write small functions. It is easier to understand and debug. Here we can step through each element of our regexp replacment lists and use the pieces to get the result we want. Then we can use that piece to write a simple recursive function with a base case and the case where there is more than one regexp of a particular type to be parsed in a line (say several words that are italicized). Of course this will not work well if I have a line break in the middle of such a markdown expression, but it was good enough for this.</p>\n\n<p>Then having something that works on one line for multiple examples, we can put all of those into the fold and create our new line of output text. I added a display for which file was going to be processed, but I didn&rsquo;t need it. Everything was very fast.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"hspace\">&nbsp;</span><span class=\"stt\">1</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">define</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">batch-pmd-&gt;pm</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">dir-with-files</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"/home/britt/progLang/racket/detectress-pollen\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"hspace\">&nbsp;</span><span class=\"stt\">2</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">current-directory</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">dir-with-files</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"hspace\">&nbsp;</span><span class=\"stt\">3</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">define</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">dl</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">directory-list</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"hspace\">&nbsp;</span><span class=\"stt\">4</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">define</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">pmd-files</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">filter</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">lambda</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">fn</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">regexp-match?</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">#rx\"(?&lt;!_).pmd$\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">fn</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">dl</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"hspace\">&nbsp;</span><span class=\"stt\">5</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">for</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">f</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">pmd-files</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"hspace\">&nbsp;</span><span class=\"stt\">6</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">define</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">inp</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">open-input-file</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">f</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">#:mode</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">'</span><span class=\"RktSym\">text</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"hspace\">&nbsp;</span><span class=\"stt\">7</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">define</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">outp</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">open-output-file</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">path-replace-extension</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">f</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\".pm\"</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">#:mode</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">'</span><span class=\"RktSym\">text</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">#:exists</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">'</span><span class=\"RktSym\">replace</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"hspace\">&nbsp;</span><span class=\"stt\">8</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">println</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">format</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"processing</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">file</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">~a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">outp</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"hspace\">&nbsp;</span><span class=\"stt\">9</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">read-write-file-pmd-pm</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">my-em-list</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">inp</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">outp</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"stt\">10</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">close-output-port</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">outp</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"stt\">11</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"stt\">12</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">define</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">flip</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">lambda</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">f</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">x</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">y</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">f</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">y</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">x</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"stt\">13</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"stt\">14</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">define</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">read-write-file-pmd-pm</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">list-of-rxs</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">file-port-in</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">file-port-out</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"stt\">15</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">let</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktSym\">line1</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">read-line</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">file-port-in</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">'</span><span class=\"RktSym\">any</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"stt\">16</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">unless</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">eof-object?</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">line1</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"stt\">17</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">displayln</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">foldr</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">curry</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">flip</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">my-new-string</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">smart-quotes</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">line1</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">list-of-rxs</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">file-port-out</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"stt\">18</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">read-write-file-pmd-pm</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">list-of-rxs</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">file-port-in</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">file-port-out</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"stt\">19</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"stt\">20</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">define</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">my-new-string</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">s</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">my-rx</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"stt\">21</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">let</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktSym\">myids</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">regexp-match-positions</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">first</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">my-rx</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">s</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"stt\">22</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">if</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">not</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">myids</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"stt\">23</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">s</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"stt\">24</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">my-new-string</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">my-string-append</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">first</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">myids</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">s</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">my-rx</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">my-rx</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"stt\">25</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"stt\">26</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">define</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">my-string-append</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">lambda</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">ids</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">s</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">my-rx</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"stt\">27</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">string-append</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">substring</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">s</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">0</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">car</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">ids</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"stt\">28</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">list-ref</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">my-rx</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"stt\">29</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">substring</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">s</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">+</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">car</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">ids</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">list-ref</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">my-rx</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">3</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><span class=\"nobreak\">-</span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">cdr</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">ids</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">list-ref</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">my-rx</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">4</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"stt\">30</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">list-ref</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">my-rx</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">2</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"Smaller\"><span class=\"Smaller\"><span class=\"stt\">31</span><span class=\"hspace\">&nbsp;</span></span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">substring</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">s</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">cdr</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">ids</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr></tbody></table></div>\n\n<h1>4\n <tt>&nbsp;</tt><a name=\"(part._.Summary__.Morals__and_.Preview_of_.Coming_.Attractions)\"></a>Summary, Morals, and Preview of Coming Attractions</h1>\n\n<h2>4.1\n <tt>&nbsp;</tt><a name=\"(part._.Summary)\"></a>Summary</h2>\n\n<p>Racket is a powerful and accessible language with a lot of power features. It allowed me to take only 10 times as long on this conversion as if I had done it by hand. But the learning process was fairly smooth and I am confident I will be paid back in time and accomplishments down the road. I recommend Racket as a first functional language and as a language for the mid-tier programmer as well. This is the programmer for whom programming is a side-activity (e.g. you are really a cognitive scientist or a physician or both) or it is a hobby or you are just isolated without the team of experts that is needed to really exploit the potential of something like Haskell.</p>\n\n<h2>4.2\n <tt>&nbsp;</tt><a name=\"(part._.Morals)\"></a>Morals</h2>\n\n<p>Learning a new language is hard. Harder than you think from your tutorial exercises, but Racket is very accessible given the complexity of the features that it offers. Prior experience with a functional language will help you make use of some of the power. There is no substitution for time and effort. Yes, the answer to your question is easily accessible in the documentation, but you often cannot find your answer until you know the answer (a coding koan?). Until you do know your answer there will be a lot of searching, but the second time things will go much more quickly. Searching for answers in documentation is not a preliminary to learning it is part of the education.</p>\n\n<h2>4.3\n <tt>&nbsp;</tt><a name=\"(part._.Preview_of_.Coming_.Attractions)\"></a>Preview of Coming Attractions</h2>\n\n<p>What about the children&rsquo;s story? It is coming. Watch this space. But this post was about Racket and learning via text conversion. The story itself will be its own blog post.</p>")) ((p+ #"/home/britt/gitRepos/brittAnderson.github.io/_src/posts/2021-06-02-the-queens-own-detectress.scrbl" . unix) f post (u . "The Queen's Own Detectress") (? . 0) 1648480973 (p+ #"/home/britt/gitRepos/brittAnderson.github.io/2021/06/the-queen-s-own-detectress.html" . unix) (u . "/2021/06/the-queen-s-own-detectress.html") (u . "2021-06-02T17:06:49") (? . 2) (? . 3) (c (u . "raisin") c (u . "qod")) (u . "\n<p>This is a story that I wrote for my wife. It emerged as a combination of dream merging to day-dream. When I related the idea over coffee the next morning my wife asked for more, and I gradually set about doing that.  It ended up as a pdf that I gave her as a gift, but in response to a few family members asking me to make it available I cobbled together some old versions to make a linkable/readable version here. In the future I hope to make it pretty and eventually to fix the horde of grammar and spelling mistakes, but for now this will have to do. The easiest way to start is with <a href=\"/assets/detectress/chapter1.html\">Chapter 1</a> (you can also get to chapter one from the navigation bar above). From there follow the links at the end of each chapter. Cheers.</p>\n\n<p>P.S. If you can make an issue if the grammar or spelling really bothers you and I will try to fix.</p>") #f (u . "\n<p>This is a story that I wrote for my wife. It emerged as a combination of dream merging to day-dream. When I related the idea over coffee the next morning my wife asked for more, and I gradually set about doing that.  It ended up as a pdf that I gave her as a gift, but in response to a few family members asking me to make it available I cobbled together some old versions to make a linkable/readable version here. In the future I hope to make it pretty and eventually to fix the horde of grammar and spelling mistakes, but for now this will have to do. The easiest way to start is with <a href=\"/assets/detectress/chapter1.html\">Chapter 1</a> (you can also get to chapter one from the navigation bar above). From there follow the links at the end of each chapter. Cheers.</p>\n\n<p>P.S. If you can make an issue if the grammar or spelling really bothers you and I will try to fix.</p>")) ((p+ #"/home/britt/gitRepos/brittAnderson.github.io/_src/posts/2022-05-10-common-lisp-is-old-and-i-love-it.md" . unix) f post (u . "Common Lisp Is Old. And I Love It") (? . 4) 1652225364 (p+ #"/home/britt/gitRepos/brittAnderson.github.io/2022/05/common-lisp-is-old-and-i-love-it.html" . unix) (u . "/2022/05/common-lisp-is-old-and-i-love-it.html") (u . "2022-05-10T10:54:28") (? . 3) (? . 5) (c (u . "common-lisp") c (u . "programming-languages")) (u . "\n<p>Learning the basics of a programming language once is fun. Learning it every six months is tedious. One of the beautiful experiences of working with Common Lisp is that your learning is one and done.</p>") #t (u . "\n<p>Learning the basics of a programming language once is fun. Learning it every six months is tedious. One of the beautiful experiences of working with Common Lisp is that your learning is one and done.</p>\n<!-- more-->\n\n<p>I started experimenting with Haskell around GHC 6.8. Hackage was still the go to then, but soon I ran into cabal hell, and I worried alot about my package index. Cabal Sandboxes appeared. And Stackage. And then there were new features of cabal-install that became declarative and then became defaults. I started using ArchLinux in the days when some key Haskellers made that their go to distribution. Then a change in static and dynamic linking brought the whole thing down upon my head. And finally I had to try and play with Nix to make things work. Pile on the number of language pragmas I had to worry about and it became too painful to continue. As someone who is not a programming language researcher or developer, gaps of two to three months without using Haskell were common (often longer). This always meant starting over. First, repair my broken system. Second, learn a new set of tools.</p>\n\n<p>This is not a rant about Haskell. I could have talked about Python2 to Python 3 and all the setup and installation tools recommended along the way (what happened to Wheels now that I think about it)? In fact, Haskell has been the single most transformative language I have worked with. It has helped me to develop practical skills, but more importantly to deepen my thinking about the use of programming languages for exploratory work in cognitive modelling. Work where the emphasis in not merely on efficiency or getting things done, but on looking to the language to facilitate one&rsquo;s own insights into the topic under investigation, and to explore languages themselves for evidence of patterns of thought that may reveal mechanisms of our internal symbol systems.</p>\n\n<p>And Lisps are no exception to this rapid evolution and the need for constant education on tooling and practice. Racket changes its back end compiler and now may even be making a fundamental move to a new syntax. Guile Scheme is hardly a static target.</p>\n\n<p>But not so with Common Lisp. I read text books from 20 years ago, cut and paste code snippets, and it all just works. I stopped worrying about github repos with no commits for years. They are likely just done. I may still forget a lot about Common Lisp in my gaps between usage. And I may be frustrated by limits or libraries that don&rsquo;t give me exactly what I want without work, but by and large, when it comes time to re-learn that which I knew three months before the process is easier, because I am simply re-learning what I knew before. And each time it is easier, not harder, and each each time the retention lives longer. And I have yet to come across any application I, a non-industrial type, would want to code that I cannot do cleanly and relatively painlessly in Common Lisp.</p>\n\n<p>There are many other reasons to learn Common Lisp, but for me reason number one is that you won&rsquo;t have to learn it more than once.</p>")) ((p+ #"/home/britt/gitRepos/brittAnderson.github.io/_src/posts/2022-05-10-torsors.md" . unix) f post (u . "Torsors") (p+ #"/home/britt/gitRepos/brittAnderson.github.io/_src/posts/2022-05-10-torsors.md" . unix) 1652195264 (p+ #"/home/britt/gitRepos/brittAnderson.github.io/2022/05/torsors.html" . unix) (u . "/2022/05/torsors.html") (u . "2022-05-10T11:07:44") #f #f (c (u . "DRAFT")) (u . "\n<p><em>Replace this with your post text. Add one or more comma-separated Tags above. The special tag <code>DRAFT</code> will prevent the post from being published.</em></p>") #t (u . "\n<p><em>Replace this with your post text. Add one or more comma-separated Tags above. The special tag <code>DRAFT</code> will prevent the post from being published.</em></p>\n<!-- more-->")) ((? . 5) f post (u . "Getting Started Writing With Scribble") (? . 5) 1655933488 (p+ #"/home/britt/gitRepos/brittAnderson.github.io/2022/06/getting-started-writing-with-scribble.html" . unix) (u . "/2022/06/getting-started-writing-with-scribble.html") (u . "2022-06-22T17:23:27") (? . 4) #f () (u . "\n<p>I have been thinking of trying to write an online textbook for a course I teach. It involves some code and I thought that racket might be a good language choice for the coding material, and that seemed to suggest using scribble, the racket documentation tool, but then ...</p>") #t (u . "\n<p>I have been thinking of trying to write an online textbook for a course I teach. It involves some code and I thought that racket might be a good language choice for the coding material, and that seemed to suggest using scribble, the racket documentation tool, but then ...</p>\n<!--more-->\n\n<p>I found myself stymied doing even the most basic of things when I tried to adapt my org-mode workflow to a scribble work flow. Including a graph or typesetting some math was difficult, and I could not figure out how to emulate the org-babel functionality. It took a lot of on-line search and pouring through the source code to get examples of what I needed, and still many things are not quite right.</p>\n\n<p>As is often true of racket is that there is no middle level documentation. The quick and easy start from this file sort of stuff. You have exhaustive source code that you can read. And you have very basic step by step tutorials. But sometimes you don&rsquo;t want to learn from first principles. You just want to get something to work and for that it is sometimes ideal to have a short file that just works, and that you can use as a starting point for expanding your knowledge by adding features as you need them. So, to help myself in the future, and maybe others in the present I wrote this short explanation of a template to get one up and running.</p>\n\n<h1>1\n <tt>&nbsp;</tt><a name=\"(part._.A_.Simple_.Scribble_.Book_.Template_.Explained)\"></a>A Simple Scribble Book Template Explained</h1>\n\n<h2>1.1\n <tt>&nbsp;</tt><a name=\"(part._.Starting_with_a__lang_declaration)\"></a>Starting with a #lang declaration</h2>\n\n<p>Your file needs to start with a language declaration. This is what it looks like the for the scribble book form.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><a class=\"RktModLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/guide/Module_Syntax.html#%28part._hash-lang%29\"><span class=\"RktMod\">#lang</span></a><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><a class=\"RktModLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/scribble/Book_Format.html\"><span class=\"RktSym\">scribble/book</span></a><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\">&#160;</span><span class=\"RktMeta\"></span></td></tr></tbody></table></div>\n\n<h2>1.2\n <tt>&nbsp;</tt><a name=\"(part._.Importing_.Library_.Functions)\"></a>Importing Library Functions</h2>\n\n<p>If you need additional functions not included by your language declaration you can <span class=\"RktSym\">require</span> them. Here are some choices that seems to offer some reasonable functionality.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktSym\">@</span><span class=\"RktPn\">(</span><span class=\"RktSym\">require</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">plot/pict</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">scribble/base</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">scribble-math/dollar</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">scribble/example</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">scribble/manual</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">racket/math</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr></tbody></table></div>\n\n<p>The above <span class=\"RktSym\">require</span> code is a way of importing additional libraries to give functionality to your scribble document. For example the <span class=\"RktSym\">scribble-math/dollar</span> library allows you to use a latex like $ character to get a latex type setting of a mathematical formula.\n<span class=\"RktSym\">scribble/example</span> is nice in that it allows you to type set code in the document <span style=\"font-style: italic\">and</span> include the output of that code in the final product when you compile the document. There will be examples of both these uses shortly.</p>\n\n<h2>1.3\n <tt>&nbsp;</tt><a name=\"(part._.Plotting)\"></a>Plotting</h2>\n\n<p></p>\n\n<div class=\"SIntrapara\">Plotting in racket is not something that I understand at all well, but it remains something I need to have available. Here is the creation of a plotting evaluator\n</div>\n\n<div class=\"SIntrapara\">\n <div class=\"SCodeFlow\">\n  <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n   <tbody>\n    <tr>\n     <td><span class=\"RktMeta\">&#160;</span></td></tr>\n    <tr>\n     <td><span class=\"RktMeta\"></span><span class=\"RktSym\">@</span><span class=\"RktPn\">(</span><span class=\"RktSym\">define</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">plot-eval</span><span class=\"RktMeta\"></span></td></tr>\n    <tr>\n     <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">let</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">eval</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">make-base-eval</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n    <tr>\n     <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">eval</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">'</span><span class=\"RktPn\">(</span><span class=\"RktSym\">begin</span><span class=\"RktMeta\"></span></td></tr>\n    <tr>\n     <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">require</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">racket/math</span><span class=\"RktMeta\"></span></td></tr>\n    <tr>\n     <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">racket/match</span><span class=\"RktMeta\"></span></td></tr>\n    <tr>\n     <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">racket/list</span><span class=\"RktMeta\"></span></td></tr>\n    <tr>\n     <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">racket/draw</span><span class=\"RktMeta\"></span></td></tr>\n    <tr>\n     <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">racket/class</span><span class=\"RktMeta\"></span></td></tr>\n    <tr>\n     <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">plot/pict</span><span class=\"RktMeta\"></span></td></tr>\n    <tr>\n     <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">plot/utils</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n    <tr>\n     <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">eval</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n    <tr>\n     <td><span class=\"RktMeta\">&#160;</span></td></tr></tbody></table></div></div>\n\n<p>You can also put this near the top of your document to have access to that function later when you want to plot something.</p>\n\n<h2>1.4\n <tt>&nbsp;</tt><a name=\"(part._.Some_.Meta_.Data)\"></a>Some Meta Data</h2>\n\n<p>You continue to use the @ syntax to define some standard metadata such as title and author.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktSym\">@title</span><span class=\"RktPn\">{</span><span class=\"RktSym\">This</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">is</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">where</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">you</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">put</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">the</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">title</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">of</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">your</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">document</span><span class=\"RktPn\">}</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktSym\">@section</span><span class=\"RktPn\">{</span><span class=\"RktSym\">And</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">this</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">is</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">a</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">section</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">title.</span><span class=\"RktPn\">}</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr></tbody></table></div>\n\n<h2>1.5\n <tt>&nbsp;</tt><a name=\"(part._.Actually_writing_stuff)\"></a>Actually writing stuff</h2>\n\n<p></p>\n\n<div class=\"SIntrapara\">The writing becomes a mixture of things you just type as if they were text, like you are used to, and things preceded with an @ sign that switches you into a mode that leads to the next bit of text being treated as code. There are complex rules for this. I don&rsquo;t have any good advice except to </div>\n\n<div class=\"SIntrapara\">\n <ul>\n  <li>\n   <p>Read the manual</p></li>\n  <li>\n   <p>Look at the Scribble document source code.</p></li></ul></div>\n\n<p>It was the second that often proved the most helpful since you could see what the scribble authors put in their .scbrl files which they compile to produce the documentation. These files are found at the <a href=\"https://github.com/racket/scribble/tree/master/scribble-doc\">racket/scribble github repository</a>.</p>\n\n<h2>1.6\n <tt>&nbsp;</tt><a name=\"(part._.Some_.Simple_.Formatting)\"></a>Some Simple Formatting</h2>\n\n<p></p>\n\n<div class=\"SIntrapara\">Most formatting commands look something like this </div>\n\n<div class=\"SIntrapara\">\n <div class=\"SCodeFlow\">\n  <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n   <tbody>\n    <tr>\n     <td><span class=\"RktSym\">@centered</span><span class=\"RktPn\">{</span><span class=\"RktSym\">@bold</span><span class=\"RktPn\">{</span><span class=\"RktSym\">Some</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">text</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">I</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">want</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">centered</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">and</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">bold</span><span class=\"RktPn\">}</span><span class=\"RktPn\">}</span><span class=\"RktMeta\"></span></td></tr></tbody></table></div></div>\n\n<div class=\"SIntrapara\"> and produce something like this.\n</div>\n\n<div class=\"SIntrapara\">\n <blockquote class=\"SCentered\">\n  <p><span style=\"font-weight: bold\">Some text I want centered and bold</span></p></blockquote></div>\n\n<p>A simple itemized list looks like this with the use of an optional argument to make it numbered instead of bullet points. Lots of the @ formatting commands have the ability to accept these options.</p>\n\n<p></p>\n\n<table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n <tbody>\n  <tr>\n   <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktSym\">@itemlist</span><span class=\"RktPn\">[</span><span class=\"RktPn\">#:style</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">'</span><span class=\"RktSym\">ordered</span><span class=\"RktMeta\"></span></td></tr>\n  <tr>\n   <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">@item</span><span class=\"RktPn\">{</span><span class=\"RktSym\">This</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">is</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">the</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">first</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">item</span><span class=\"RktPn\">}</span><span class=\"RktMeta\"></span></td></tr>\n  <tr>\n   <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">@item</span><span class=\"RktPn\">{</span><span class=\"RktSym\">And</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">this</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">is</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">the</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">second</span><span class=\"RktPn\">}</span><span class=\"RktPn\">]</span><span class=\"RktMeta\"></span></td></tr>\n  <tr>\n   <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\">&#160;</span></td></tr></tbody></table>\n\n<p>Which yields:</p>\n\n<ol>\n <li>\n  <p>This is the first item</p></li>\n <li>\n  <p>And this is the second</p></li></ol>\n\n<h2>1.7\n <tt>&nbsp;</tt><a name=\"(part._.How_to_do_a_few_more_basic_things)\"></a>How to do a few more basic things</h2>\n\n<p>For those of us coming to racket without institutional support or a local expert, it can be hard to get started on even basic document features. Here a few more simple examples of how to get things done.</p>\n\n<h3>1.7.1\n <tt>&nbsp;</tt><a name=\"(part._.Links)\"></a>Links</h3>\n\n<p>The format for a hyperlink is a bit tricky. Some things are strings. Some things are not. It depends on whether you are using [ or {.</p>\n\n<p></p>\n\n<div class=\"SIntrapara\">Here is a <a href=\"https://commons.wikimedia.org/w/index.php?curid=44114666\">link</a> to a picture of the action potential. I included it like this,\n</div>\n\n<div class=\"SIntrapara\">\n <div class=\"SCodeFlow\">\n  <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n   <tbody>\n    <tr>\n     <td><span class=\"RktSym\">@hyperlink</span><span class=\"RktPn\">[</span><span class=\"RktVal\">\"https://commons.wikimedia.org/w/index.php?curid=44114666\"</span><span class=\"RktPn\">]</span><span class=\"RktPn\">{</span><span class=\"RktSym\">link</span><span class=\"RktPn\">}</span><span class=\"RktMeta\"></span></td></tr></tbody></table></div></div>\n\n<h3>1.7.2\n <tt>&nbsp;</tt><a name=\"(part._.Writing_.Math)\"></a>Writing Math</h3>\n\n<p>To get this to work for html export I had to make sure I had this declaration in the document.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktSym\">@</span><span class=\"RktPn\">(</span><span class=\"RktSym\">use-mathjax</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr></tbody></table></div>\n\n<p>Then, because I imported that <span class=\"RktSym\">scribble-math/dollar</span><span class=\"RktMeta\"></span> library I could write a LaTeX like like and it got typeset on export.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktSym\">@</span><span class=\"RktPn\">(</span><span class=\"RktSym\">$$</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"\\\\sum_{\\\\forall</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\\\\in</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\\\\left\\\\{</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">,</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">,</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\\\\right</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\\\\}}</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">x</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">~=~</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">6\"</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr></tbody></table></div>\n\n<p>Produced this:</p>\n\n<p></p>\n\n<div class=\"math\">\\sum_{\\forall x \\in \\left\\{ 1 , 2 , 3 \\right \\}} x ~=~ 6</div>\n\n<h3>1.7.3\n <tt>&nbsp;</tt><a name=\"(part._.Plotting)\"></a>Plotting</h3>\n\n<p>This really needs a knowledge of the evaluator and the plot library. But if you really just need to put a small sample up of a function or a scatter plot here is some code to get your started.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktSym\">@examples</span><span class=\"RktPn\">[</span><span class=\"RktPn\">#:eval</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">plot-eval</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">define</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">xs</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">build-list</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">20</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">lambda</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">_</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">random</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">define</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">ys</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">build-list</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">20</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">lambda</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">_</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">random</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">plot</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">points</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">map</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">vector</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">xs</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">ys</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktMeta\"></span></td></tr></tbody></table></div>\n\n<p>Note that here I am using the <span class=\"RktSym\">examples</span> function. This both typesets the code, and includes the result of running the code in the document. This is the result of executing what I have typeset in the paragraph proceding.</p>\n\n<p></p>\n\n<div class=\"SIntrapara\">Examples:</div>\n\n<div class=\"SIntrapara\">\n <div class=\"SCodeFlow\">\n  <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n   <tbody>\n    <tr>\n     <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">define</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">xs</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">build-list</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">20</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">random</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n    <tr>\n     <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">define</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ys</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">build-list</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">20</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">lambda</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">random</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n    <tr>\n     <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">plot</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">points</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">map</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">vector</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">xs</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ys</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n    <tr>\n     <td>\n      <p><img src=\"/img/posts/2022-06-22-getting-started-writing-with-scribble/pict.png\" alt=\"image\" height=\"406\" style=\"vertical-align: 0px; margin: -3px -3px -3px -3px;\" width=\"406\" /></p></td></tr></tbody></table></div></div>\n\n<p>But you do not need to do it in this way. You can just write and run code. I am going to show what I typed, but you will only see the plot. If I had not formally made a code block to display the code for this document it would have been hidden from the reader of the final output.</p>\n\n<p><img src=\"/img/posts/2022-06-22-getting-started-writing-with-scribble/pict_2.png\" alt=\"image\" height=\"406\" style=\"vertical-align: 0px; margin: -3px -3px -3px -3px;\" width=\"406\" /></p>\n\n<p>Here is the code to produce that plot:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktSym\">@</span><span class=\"RktPn\">(</span><span class=\"RktSym\">plot-eval</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">plot</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">function</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">sin</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><span class=\"nobreak\">-</span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">pi</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">pi</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">#:label</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"y</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">=</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">sin(x)\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr></tbody></table></div>\n\n<h2>1.8\n <tt>&nbsp;</tt><a name=\"(part._.Conclusion)\"></a>Conclusion</h2>\n\n<p>There is much more you can do with scribble. My point in sharing this is to provide a simple template for getting started. The formal documentation can scanning of source code can be a long road to get started. It can be nice to a have a relatively simple working example and then build the complexity in as you need it.</p>")) ((p+ #"/home/britt/gitRepos/brittAnderson.github.io/_src/posts/2021-04-14-hello-darwin-and-avoir-hakyll.scrbl" . unix) f post (u . "Hello Darwin and Avoir Hakyll") (? . 6) 1648480973 (p+ #"/home/britt/gitRepos/brittAnderson.github.io/2021/04/hello-darwin-and-avoir-hakyll.html" . unix) (u . "/2021/04/hello-darwin-and-avoir-hakyll.html") (u . "2021-04-14T11:04:09") (? . 7) (? . 1) (c (u . "raisin") c (u . "haskell") c (u . "racket") c (u . "programming") c (u . "Author: Britt Anderson")) (u . "\n<p>I have moved this blog from <a href=\"https://jaspervdj.be/hakyll/\">Hakyll</a> to <a href=\"https://github.com/pmatos/darwin\">Darwin</a>. Here I describe some of what motivated the move.</p>") #t (u . "\n<p>I have moved this blog from <a href=\"https://jaspervdj.be/hakyll/\">Hakyll</a> to <a href=\"https://github.com/pmatos/darwin\">Darwin</a>. Here I describe some of what motivated the move.</p>\n<!--more-->\n\n<h1><a name=\"(part._.Why_not_.Hakyll_)\"></a>Why not Hakyll?</h1>\n\n<p>First, I like hakyll and I really like <a href=\"https://en.wikipedia.org/wiki/Haskell_%28programming_language%29\">Haskell</a>, but the relation is very asymmetric. I give and give some more, but Haskell is never happy. And despite its slogan, Haskell is a <a href=\"https://arifordsham.com/haskell-doomed-to-succeed/\">victim of its own success</a>. You cannot be a casual user of Haskell. You can be a tutorial user that works through exercises in <a href=\"https://docs.haskellstack.org/en/stable/ghci/\">ghci</a>. Or you can be a power user, but you cannot be a mid-level user. At least not for long. The reason is that someone will upgrade ghc, or cabal will change its installation defaults (and that was a great change by the way) or <a href=\"https://github.com/commercialhaskell/stack/issues\">stack will fail</a> to build something it used to, or everyone moves to nix and so now you have to <a href=\"https://elland.me/posts/2021-03-26-haskell-docker-nix.html\">learn nix to use haskell</a>. Then, despite all that, you can lose a day (or more) trying and failing to install something like <a href=\"https://github.com/ghcjs/ghcjs/issues\">ghcjs</a>. That was for me the last straw. Time to move on.</p>\n\n<p>Like a lot of laboratories in the time of Covid we are trying to move studies on line. I have some brilliant students who have jumped into the world of javascript and made everything just work. But I find javascript aesthetically distasteful. When I try to use it I feel like I am crushing a piece of aluminum foil between two fillings. If I have to learn yet another programming language to be productive, I don&rsquo;t want it to be javascript. And with the dream of <a href=\"https://webassembly.org/\">web-assembly</a> always on the horizon, I am especially reluctant to inflict such pain on myself for only a temporary gain. Thus, I wanted to see what I could use that might be more pleasant, and educational. I tried and failed with both <a href=\"https://www.purescript.org/\">purescript</a> and haskell.</p>\n\n<p>Purescript is a very nice language. I recommend it, but again not for the casual user; not for the non-cs/software engineer. It is growing. It&rsquo;s <a href=\"https://github.com/purescript/spago\">package manager changes</a>. Installation is changing. You can use npm, but you can also use cabal - or at least I managed to. But everything is under development and one of the favorite educational tools is <a href=\"https://github.com/JordanMartinez/purescript-jordans-reference\">losing its active development</a>, and so the beginner has a hard time unless they are in an environment where there are local experts.</p>\n\n<p>Haskell can compile to javascript, but wait. The two most interesting modern tools are <a href=\"https://haskell-miso.org/\">miso</a> and <a href=\"https://reflex-frp.org/\">reflex</a>, both of which rely on ghcjs. GHCJS lags behind ghc, and cannot, currently, be installed the same way. Both of these packages recommend nix. Well I tried, and the instructions failed. And not having a local expert, and requests for comments on Reddit unanswered, I felt compelled to move on. Too much time has been spent chasing a dream. I never actually got to really explore the dream either, because I was always too busy either combating cabal hell, trying to learn stack, trying to get the cabal-new commands to work, trying to puzzle out nix (or maybe even nixos, I tried that too). I will amplify on the nature of the dream below, but for now let it be said that the purpose of hakyll was to give me a chance to play within the haskell garden in a low risk fashion: learn some haskell; examine some of the abstractions; and do so in a way that I could pick it up and put it down as time demands for other projects. However, picking-up and putting-down cycles don&rsquo;t work in haskell. The development cycle is too fast. There is always a new tool or a new <a href=\"https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/pragmas.html\">pragma</a>, and the people developing them are not writing the documentation at the <a href=\"http://learnyouahaskell.com/\">learn you a haskell level</a> (a very nice beginner&rsquo;s book by the way). Even worse is that the internet is not self-cleansing, and all the old, now wrong, documentation for how to do something is still there. I think <a href=\"https://en.wikipedia.org/wiki/Lazy_evaluation\">lazy evaluation</a> is awesome, I think lazy evaluation might capture aspects of human cognition. I also think the tight relationship between haskell code and the <a href=\"https://plato.stanford.edu/entries/category-theory/\">category theory</a> vocabulary, <a href=\"https://plato.stanford.edu/entries/lambda-calculus/\"> and lambda calculus</a> origins might make haskell the preferred language for  implementing computational cognitive models where the code itself transparently documents the model&rsquo;s mathematical structure. But not if you are not in a position to use it daily, and to have around a group of users that also are using it daily. So, for now, I am setting haskell aside, though I will come back to it, and I am looking elsewhere for a tool that offers some of the same expressiveness, but with a lower bar to entry and casual exploration. I think I may have found it in racket.</p>\n\n<h1><a name=\"(part._.Why_.Darwin_)\"></a>Why Darwin?</h1>\n\n<p>Darwin is a fork of the Frog static site generator written in Racket. The answer to \"why darwin\" is really the same as for using hakyll: I have decided to learn some racket and I am using darwin as a mechanism to do so. And let me say it has been a pleasure. I cannot emphasize enough the difference in the experience. Racket has a nice <a href=\"https://docs.racket-lang.org/\">updated documentation</a> site. They have a much smaller user base that clusters around a few principal sources of interaction for questions and answers. As a language with a big focus on education they cater to the new user, and the user with limited time or knowledge.</p>\n\n<p>I have not had to leave that much behind. Racket does give you modern features if you want them. You want <a href=\"https://docs.racket-lang.org/lazy/index.html?q=lazy\">laziness</a>, you can get it. You want <a href=\"https://docs.racket-lang.org/ts-guide/\">static types</a>, you can have them. But they are not forced, and that does make it easier to backslide.</p>\n\n<p>Racket reminds me of haskell 15 years ago. Then you had hackage and cabal, and maybe things were hard, but they were solvable, and help was available and active in an IRC. But the people who gravitated to haskell were very smart and ambitious, and many of them did not see academics as their frontier, but they wanted to build things that people used, and as as the needs and priorities of industry dominated their use cases, the language begin to show their influence. This seems to me, an outsider, as extremely valuable for anyone who wants to use haskell for a real world project, but to the disadvantage of the hobbyist. Tant pis. I would not ask the language development to cater to my use cases.</p>\n\n<p>However, I appreciate that I can find another language where all the packages seem to be written by graduate students. If that means they are active for only a few years before the <a href=\"https://github.com/ntoronto/drbayes\">packages lose a maintainer</a> so be it. I prefer the vibrancy of graduate enthusiasms to the move-fast and break-things of the industrial mover and shakers. I have already benefited by being guided to <a href=\"https://www.philosophie.uni-konstanz.de/ag-spohn/personen/prof-dr-wolfgang-spohn/papers/\">ranking theory</a> by a <a href=\"https://github.com/tjitze/ranked-programming/tree/48cbec099f04c6e49c519415be36b910c8aff790\">package</a> in the racket database.</p>\n\n<h2><a name=\"(part._.The_dream)\"></a>The dream</h2>\n\n<p>The dream is to think about how to express cognitive models with a single broad language that will make them concrete and comparable across domains. The language should obviously be math, and the language within the field of mathematics that is most suited to translating across domains is category theory. It also seems to work well in applied fields, and I think holds promise for computational cognitive modelling. Languages like <a href=\"https://github.com/statebox/idris-ct\">Idris</a>, <a href=\"https://hackage.haskell.org/package/data-category\">Haskell</a>, and even <a href=\"https://algebraicjulia.github.io/Catlab.jl/dev/\">Julia</a> have libraries and packages for category theory, and even though one does not exist for racket there are <a href=\"https://docs.racket-lang.org/lathe-morphisms/index.html\">some early efforts</a>. Maybe racket can be the language the connects mathematical structures like the lambda calculus and category theory to computational models of psychology and neuroscience. </p>")) ((p+ #"/home/britt/gitRepos/brittAnderson.github.io/_src/posts/2021-03-29-whatIsAttn.md" . unix) f post (u . "What is Attention Redux") (? . 7) 1648480973 (p+ #"/home/britt/gitRepos/brittAnderson.github.io/2021/03/what-is-attention-redux.html" . unix) (u . "/2021/03/what-is-attention-redux.html") (u . "2021-03-29T00:00:00") (? . 8) (? . 6) (c (u . "raisin") c (u . "Author: Britt Anderson")) (u . "\n<p>In 2011 I published an <a href=\"https://www.frontiersin.org/articles/10.3389/fpsyg.2011.00246/full\">article</a> called &ldquo;There is no such thing as attention.&rdquo; This year I wrote a submission that I hope will appear in <a href=\"https://onlinelibrary.wiley.com/journal/19395086#?tabActivePane=\">WIREs Cognitive Science</a> revisiting this issue; this time as an opinion piece for a collection to be titled <em>What is Attention?</em></p>") #t (u . "\n<p>In 2011 I published an <a href=\"https://www.frontiersin.org/articles/10.3389/fpsyg.2011.00246/full\">article</a> called &ldquo;There is no such thing as attention.&rdquo; This year I wrote a submission that I hope will appear in <a href=\"https://onlinelibrary.wiley.com/journal/19395086#?tabActivePane=\">WIREs Cognitive Science</a> revisiting this issue; this time as an opinion piece for a collection to be titled <em>What is Attention?</em></p>\n<!-- more-->\n\n<h2 id=\"there-still-is-no-such-thing-as-attention\">There <em>still</em> is no such thing as attention.</h2>\n\n<p>Basically, my answer to the question is the same: What is attention? Nothing <strong>is</strong> attention. But my purpose here is to reflect a bit on coming back to a topic ten years later and how I perceive the changing landscape.</p>\n\n<p>I feel a lot less fervor for the issue. My opinion is as deeply held, and I feel the evidence is greater than before. What has changed is my general sense that the battle is won. Not because I wrote my article. My article did not direct the <em>zeitgeist</em> it reflected it. I have gotten a lot of feedback on that article. Some people cite me, but I have the sense that many more read it and liked it then ever quote it or cite it. I think that is because I gave voice to something that many people felt and that more people now feel. The word attention is not fit for purpose. It has a certain practical benefit of helping you find the posters that will interest you at a conference, but it doesn&rsquo;t help you organize your data, conceive your experiments, or appear as a useful construct in your theories.</p>\n\n<h2 id=\"attention-as-exemplar\">Attention as Exemplar</h2>\n\n<p>I gave words to some ideas that I didn&rsquo;t invent, but simply detected. And one of the reasons I feel my piece got some attention was because others recognized their feelings and suspicions in my words, and it gave them a concrete signpost to point to when wanting to share their concerns with others.</p>\n\n<p>Well and good, but then why write again on the same topic if my opinion is largely the same and the consensus seems to be converging to the same position? There is probably an argument to be made for writing the same paper over and over as a tactic to achieve recognition in academics. I won&rsquo;t deny the argument in general, but it doen&rsquo;t appeal to me. I have enough trouble finding the personal capital to invest in writing articles the first time. Once I know what I want to say, and how I intend to say it; a stage that occurs fairly early in the writing process, my own personal goals are largely met, and I have to rely on my stubborness to finish <em>actually</em> writing the article, and not just living with my mentalized version. I accept the professional benefits of repeating your story over and over, but that wasn&rsquo;t what got me to bother revisiting the question of what is attention. It is that attention seems to be a very good example of a more general problem. One that plagues psychology in particular: conceptual fragmentation. Understanding what that is can help us in science a lot. It can help us recognize terms we should eliminate from our discourse and arguments where we might think we are arguing about a shared concept, but in fact have been tricked by subtle distinctions into wasting our time and ink comparing apples and oranges. There are heuristic guidelines for recognizing these futile debates and suspect terms. I found the impetus to revisit the issue of attention, because it gave me the opportunity to read and think about the topic of conceptual fragmentation generally, and discourse eliminativism: where we agree to remove a word from our scientific conversations. Another article on &ldquo;What is Attention?&rdquo; allowed me to share this new enthusiam. That is the moral. To find the motivation to revisit an old, at least for you, topic find the new angle or the new application.</p>\n\n<h2 id=\"please-read-\">Please read &hellip;</h2>\n\n<p>I would like to advertise the article by <a href=\"https://link.springer.com/article/10.1007/s13194-016-0136-2\">Taylor and Vickers</a>. It is a very readable overview of this topic that will benefit you regardless of your interest in the debate over attention. And they did cite me after all.</p>"))))