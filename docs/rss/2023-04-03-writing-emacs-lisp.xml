<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
     xmlns:georss="http://www.georss.org/georss"
     xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
     xmlns:media="http://search.yahoo.com/mrss/"><channel>
  <title>Publish Your Embarassing Code</title>
  <atom:link href="https://brittanderson.github.io/2023-04-03-writing-emacs-lisp.xml" rel="self" type="application/rss+xml" />
  <link>https://brittanderson.github.io</link>
  <description><![CDATA[]]></description>
  <language>en</language>
  <pubDate>Fri, 07 Apr 2023 11:01:08 -0400</pubDate>
  <lastBuildDate>Fri, 07 Apr 2023 11:01:08 -0400</lastBuildDate>
  <generator>Emacs 28.2 Org-mode 9.7-pre</generator>
  <webMaster>britt@uwaterloo.ca (Britt Anderson)</webMaster>
  <image>
    <url>https://orgmode.org/img/org-mode-unicorn-logo.png</url>
    <title>Publish Your Embarassing Code</title>
    <link>https://brittanderson.github.io</link>
  </image>

  <p>
    I am a long term Emacs user, and I love it, but while I am quick to adopt new packages (and frequently break my <code>init.el</code>) I have never fully exploited the fact that Emacs is programmable. The pitch I am making here is to publish your embarassing code so that you help give courage to others to try. You do this by debunking the myth that everyone else is an Uber-coder, and by giving more beginner friendly examples to help people get a leg up.
  </p>

  <p>
    What I show here a are a couple of brittle bespoke emacs lisp functions I wrote to get some slugs of recent posts on to my home page. There may well be built in packages that do this better, but one of the way to motivate yourself to write code in a new language is to write something you can use instead of just doing tutorials on line or tricking yourself into thinking that watching YouTube videos is all there is to learning.
  </p>

  <p>
    As I have spent some of the last couple of years dabbling with Racket and Common Lisp I thought emacs-lisp would not be too hard. I was wrong. I really had trouble getting it through my head that things happened in buffers, and that buffers were more than just what I could see on the screen. I also had trouble with the fact that emacs-lisp functions did not return what I thought they should. For example, if I move to <code>end-of-visible-line</code> I wanted my current location in the buffer to be returned, but some of these functions move the point, some do not, and some do and some do not return locations I can use. I to write <code>(point (some-motion-function-here))</code>, but often had to chain things in a <code>progn</code> where a motion function was follwed by a <code>(point)</code>. But whether or not that makes sense to others, whether or not a work around exists, the only way I really came to grips with it was by trying to write my own code. And I recommend that you do to. Don't wait for the <i>right</i> answer, someone else to author that package, or for your emacs-lisp expertise to ripen. Just write code for something you can use. 
  </p>

  <p>
    I am not sure that my code deserves a detailed deep dive, but I will include it here so as to give other beginners a concrete example, and so that people see that not everyone writes beautiful code.
  </p>

  <p>
    Before the file dump, let me set up the goal. Org-publish functions are great for creating a static web site. But they do not provide out of the box some of the convenience function that you may see in some other static web site generators. What I wanted was to have the first paragraph of the last few blog posts I wrote appear on the home page with links to the full entry.
  </p>

  <p>
    The way I decided to deal with this was by reading the post directory, finding blog posts based on convention of starting with a date, and then with the blog posts opened in a temporary buffer grabbing the necessary parts for insertion in to the home page, which I do using <code>babel</code> src blocks. I found a lot of problems with this approach. It depends on sort order. It gets confused by temporary files. If I use the text in my post that is also searched for (like the word "date") I can get un-predicatable effects. <b>But</b> it works for me today, and I learned so much by just writing it. So, if you think this is not the way it should be done, then make it better, but at least you have an imperfect starting point instead of just an aspiration combined with imposter syndrome.
  </p>

  <div class="org-src-container">
    <pre class="src src-emacs-lisp">(<span style="color: #a020f0;">defun</span> <span style="color: #0000ff;">get-post-metadata</span> ()
    <span style="color: #8b2252;">"Relies on org-mode headers to extract post-meta data and first paragraph and stores in registers"</span>
    (goto-char (point-min))
    (<span style="color: #a020f0;">let</span> ((meta-data '((<span style="color: #483d8b;">:reg</span> ?t <span style="color: #483d8b;">:search-for</span> <span style="color: #8b2252;">"#+title: "</span> <span style="color: #483d8b;">:start</span> <span style="color: #8b2252;">"**  "</span>)
    (<span style="color: #483d8b;">:reg</span> ?d <span style="color: #483d8b;">:search-for</span> <span style="color: #8b2252;">"#+date: "</span>  <span style="color: #483d8b;">:start</span> <span style="color: #8b2252;">"Date: "</span>)
    (<span style="color: #483d8b;">:reg</span> ?a <span style="color: #483d8b;">:search-for</span> <span style="color: #8b2252;">"#+author: "</span> <span style="color: #483d8b;">:start</span> <span style="color: #8b2252;">"Author: "</span>))))
    (<span style="color: #a020f0;">dolist</span> (md meta-data)
    (set-register (plist-get md '<span style="color: #483d8b;">:reg</span>) (plist-get md '<span style="color: #483d8b;">:start</span>))
    (append-to-register (plist-get md '<span style="color: #483d8b;">:reg</span>) (goto-char (search-forward (plist-get md '<span style="color: #483d8b;">:search-for</span>))) (line-end-position)))
    (forward-paragraph)
    (copy-to-register ?s (point) (<span style="color: #a020f0;">progn</span>
    (forward-paragraph)
    (point)))))

    (<span style="color: #a020f0;">defun</span> <span style="color: #0000ff;">put-post-metadata</span> (fn)
    <span style="color: #8b2252;">"Inserts the registers holding post metadata into current-buffer"</span>
    (<span style="color: #a020f0;">let</span> ((reg-list '(?t ?d ?a ?s)))
    (<span style="color: #a020f0;">dolist</span> (r reg-list)
    (insert-register r t)
    (insert <span style="color: #8b2252;">"\n"</span>))
    (insert (format <span style="color: #8b2252;">"[[%s][%s]] \n\n"</span> fn <span style="color: #8b2252;">"read full entry"</span>))))

    (<span style="color: #a020f0;">defun</span> <span style="color: #0000ff;">get-post-list</span> (post-dir n-posts)
    <span style="color: #8b2252;">"Gets the list of the n-posts most recent files in the post-dir"</span>
    (<span style="color: #a020f0;">setq</span> ps (directory-files post-dir t <span style="color: #8b2252;">"[0-9]\\{4\\}.*[org]$"</span>))
    (<span style="color: #a020f0;">setq</span> most-recent (nreverse (last ps n-posts)))
    most-recent)

    (<span style="color: #a020f0;">defun</span> <span style="color: #0000ff;">erase-recent-posts</span> ()
    <span style="color: #8b2252;">"Erases the text in the recent posts section so as to prepare for inserting updated data."</span>
    (goto-char (point-min))
    (search-forward <span style="color: #8b2252;">"Recent Posts"</span>)
    (<span style="color: #a020f0;">let</span> ((begin-posts (point))
    (end-posts (<span style="color: #a020f0;">progn</span> (search-forward <span style="color: #8b2252;">"Older Posts"</span>)
    (beginning-of-line)
    (point))))
    (delete-region begin-posts end-posts)
    (insert <span style="color: #8b2252;">"\n\n"</span>)))

    (<span style="color: #a020f0;">defun</span> <span style="color: #0000ff;">insert-recent-posts</span> (list-post-files)
    <span style="color: #8b2252;">"Inserts the post data for all the desired posts into the current-buffer."</span>
    (<span style="color: #a020f0;">dolist</span> (p (nreverse list-post-files))
    (<span style="color: #a020f0;">with-temp-buffer</span>
    (insert-file-contents p)
    (goto-char (point-min))
    (get-post-metadata))
    (goto-char (point-min))
    (search-forward <span style="color: #8b2252;">"Recent Posts"</span>)
    (forward-line)
    (put-post-metadata p)))

    (<span style="color: #a020f0;">defun</span> <span style="color: #0000ff;">clean-and-refresh-new-posts</span> (pd np)
    <span style="color: #8b2252;">"The principal function that calls all others to erase the current entries, generate a new list of posts, get their meta data and put their meta data into the site home page."</span>
    (goto-char (point-min))
    (erase-recent-posts)
    (<span style="color: #a020f0;">let</span> ((list-recent-posts (get-post-list pd np)))
    (insert-recent-posts list-recent-posts)))
  </pre>
</div>
</channel>
</rss>